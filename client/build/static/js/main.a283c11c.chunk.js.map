{"version":3,"sources":["redux/actions.js","Components/Intro.js","Components/Guess.js","Components/Recorder.js","Components/Texter.js","Components/ChooseRecord.js","Components/Switcher.js","Components/Results.js","Components/Game.js","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["songResponse","data","type","payload","end","addToHistory","pendingStatus","mapDispatchToProps","start","status","connect","useState","isStarter","setPage","Buttons","name","func","className","xl","map","elem","i","xs","key","color","onClick","guessed","giveChance","finish","guessEnd","round","message","length","Array","isArray","lg","artist","title","preview","id","controls","src","disabled","filter","getWindowDimensions","window","width","innerWidth","height","innerHeight","songs","apiQuery","isRecording","setRecording","Recorded","setRecorded","isFinished","setFinished","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","record","onStop","recordedBlob","strokeColor","backgroundColor","mimeType","e","a","async","target","controlElem","children","parentElement","innerText","fd","FormData","append","blob","url","fetch","method","body","then","res","ok","json","catch","err","console","log","pending","songText","setText","onSubmit","preventDefault","lastChild","obj","headers","JSON","stringify","md","rows","value","onChange","required","ChooseRecord","activeButton","setActive","handleClick","tag","toLowerCase","Switcher","games","received","mapDisaptchToProps","startOver","songHistory","player","server","flat","game","results","sm","Boolean","location","hostname","match","combineReducers","state","action","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a283c11c.chunk.js","sourcesContent":["export const START = 'START';\r\nexport const SONG_RESPONSE = 'SONG_RESPONSE';\r\nexport const GUESSED = 'GUESSED';\r\nexport const GIVE_CHANCE = 'GIVE_CHANCE';\r\nexport const FINISH = 'FINISH';\r\nexport const END = 'END';\r\nexport const GUESS_END = \"GUESS_END\"\r\nexport const ADD_TO_HISTORY = \"ADD_TO_HISTORY\"\r\nexport const CLEAR_HISTORY = \"CLEAR_HISTORY\"\r\nexport const START_OVER = \"START_OVER\"\r\nexport const PENDING_STATUS = \"PENDING_STATUS\"\r\n\r\nexport const start = (status) => ({\r\n    type: START\r\n})\r\n\r\nexport const songResponse = (data) => ({\r\n    type: SONG_RESPONSE,\r\n    payload: {data}\r\n})\r\n\r\nexport const guessed = () => ({\r\n    type: GUESSED\r\n})\r\n\r\nexport const giveChance = () => ({\r\n    type: GIVE_CHANCE\r\n})\r\n\r\nexport const finish = () => ({\r\n    type: FINISH\r\n})\r\n\r\nexport const end = () => ({\r\n    type: END\r\n})\r\n\r\nexport const guessEnd = () => ({\r\n    type: GUESS_END\r\n})\r\n\r\nexport const addToHistory = (data) => ({\r\n    type: ADD_TO_HISTORY,\r\n    payload: data\r\n})\r\n\r\nexport const startOver = () => ({\r\n    type: START_OVER\r\n}) \r\n\r\nexport const pendingStatus = () => ({\r\n    type: PENDING_STATUS\r\n})\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  MDBContainer,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardTitle,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBBtn\r\n} from \"mdbreact\";\r\nimport { start } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Intro = ({ start }) => {\r\n  const [isStarter, setPage] = useState(true);\r\n  const showInstructions = () => {\r\n    setPage(!isStarter);\r\n  };\r\n  const startGame = () => {\r\n    start(true);\r\n  };\r\n  const Buttons = [\r\n    { name: isStarter ? \"Instructions\" : \"Start Page\", func: showInstructions },\r\n    { name: \"Start\", func: startGame }\r\n  ];\r\n  return (\r\n    <MDBContainer className=\"d-flex flex-column\">\r\n      <div className='d-flex flex-column my-auto mt-2'>\r\n      <MDBRow className=\"justify-content-center mx-0\">\r\n        <MDBCol xl='10'>\r\n        <MDBCard\r\n          className={`${isStarter ? \"animate-main\" : \"\"} to-normal-size`}\r\n        >\r\n          <MDBCardTitle>\r\n            <h2 className=\"h2-responsive text-center font-weight-normal pt-4 pr-2 pl-2\">\r\n              {isStarter ? `Welcome to Music-Akinator App!` : `Instructions`}\r\n            </h2>\r\n          </MDBCardTitle>\r\n          <MDBCardBody className=\"pt-1\">\r\n            \r\n              {isStarter\r\n                ? <h3 className=\"text-center h3-responsive\">This is gaming app, which allows you to challenge our mighty server\r\n            in song recognition. Feel free to read instructions before starting\r\n            the game.</h3>\r\n                : <><p>1. You are free to enter your song by: Humming, Actual Song and Lyrics.</p>\r\n                <p>2. For Humming and Song you will be provided by our special recorder and for Lyrics there will be a text editor.</p>\r\n                <p>3. After sending request by pressing \"Finish\" or \"Send\" you will be provided with a list of results.</p>\r\n                <p>4. You will be provided by 3 buttons:</p>\r\n                  <p>\"Guessed!\" - means that there is a song you were searching for. Server will get the point.</p>\r\n                  <p>\"Give a chance\" - means that you want to play one more round, giving a chance to our server to recognize the song\r\n                  </p>\r\n                  <p>\"Finish game\" - server could not find the needed one. You will get the point.</p>\r\n                  <p>5. There is games and rounds system.</p><p> It means that you are providing different pieces of song in different rounds and diffrerent songs in different games.(Max amount of rounds - 5)</p>\r\n                  <p>After 2 games, you will be availiable to see the results of you challenging our server, provided with the history of songs</p>\r\n                  <h4 className=\"text-center\">Have fun!</h4></>}\r\n          </MDBCardBody>\r\n        </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      <MDBRow className=\"justify-content-center mt-3\">\r\n        {Buttons.map((elem, i) => (\r\n          <MDBCol xs=\"2\" key={i}>\r\n            <MDBBtn\r\n              className=\"stable-width\"\r\n              color=\"elegant\"\r\n              onClick={elem.func}\r\n            >\r\n              <h4 className=\"mb-0\">{elem.name}</h4>\r\n            </MDBBtn>\r\n          </MDBCol>\r\n        ))}\r\n      </MDBRow>\r\n      </div>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  start\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Intro);\r\n","import React from \"react\";\r\nimport { MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardHeader, MDBCardBody, MDBCardTitle } from \"mdbreact\";\r\nimport { guessed, giveChance, finish, end, guessEnd } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nconst Guess = ({ data, guessed, giveChance, finish, end, guessEnd, round }) => {\r\n  const Buttons = [\r\n    { name: \"Guessed!\", func: guessed },\r\n    { name: \"Give a chance\", func: giveChance },\r\n    { name: \"Finish game\", func: finish }\r\n  ];\r\n  return (\r\n    <>\r\n      <MDBRow className=\"row d-flex justify-content-center text-center mt-10\">\r\n        <MDBCol>\r\n          <h1>\r\n            {data && !data.message && data.length !== 0 && Array.isArray(data)\r\n              ? \"Are there something familliar?\"\r\n              : \"Sorry, nothing found\"}\r\n          </h1>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      {data && !data.message && Array.isArray(data)\r\n        ? data.map((elem, i) => (\r\n          <MDBRow className=\"d-flex justify-content-center\" key={i}>\r\n            <MDBCol lg={'5'} className=\"mt-3\">\r\n            <MDBCard\r\n              className=\"text-center\"\r\n            >\r\n              <MDBCardHeader className=\"card-header-black\">\r\n                {\" \"}\r\n                <h5>\r\n                  {elem.artist} - {elem.title}\r\n                </h5>\r\n              </MDBCardHeader>\r\n              <MDBCardBody className=\"card-body-black\">\r\n              {elem.preview ? (\r\n                  <audio id=\"player\" className='audio-width'controls>\r\n                    <source src={elem.preview} type=\"audio/mp3\" />\r\n                  </audio>\r\n                ) : (\r\n                  <MDBCardTitle><h4 className=\"mb-0\">Sorry, no preview for this one</h4></MDBCardTitle>\r\n                )}\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n            </MDBCol>\r\n            </MDBRow>\r\n          ))\r\n        : \"\"}\r\n      <MDBRow className=\"justify-content-center mt-4\">\r\n        {data && !data.message && data.length !== 0 && Array.isArray(data)\r\n          ? Buttons.map(elem => (\r\n              <MDBBtn\r\n              key={elem.name}\r\n                className=\"stable-width\"\r\n                color=\"elegant\"\r\n                disabled={\r\n                  elem.name === \"Give a chance\" && round >= 5 ? true : false\r\n                }\r\n                onClick={() => {\r\n                  elem.func();\r\n                  guessEnd();\r\n                }}\r\n              >\r\n                <h4 className=\"mb-0\">{elem.name}</h4>\r\n              </MDBBtn>\r\n            ))\r\n          : Buttons.filter((elem, i) => i !== 0).map(elem => (\r\n              <MDBBtn\r\n              key={elem.name}\r\n                className=\"stable-width\"\r\n                color=\"elegant\"\r\n                disabled={\r\n                  elem.name === \"Give a chance\" && round >= 5 ? true : false\r\n                }\r\n                onClick={() => {\r\n                  elem.func();\r\n                  guessEnd();\r\n                }}\r\n              >\r\n                <h4 className=\"mb-0\">{elem.name}</h4>\r\n              </MDBBtn>\r\n            ))}\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  guessed,\r\n  giveChance,\r\n  finish,\r\n  end,\r\n  guessEnd\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Guess);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MDBBtn, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { ReactMic } from \"@cleandersonlobo/react-mic\";\r\nimport { songResponse, addToHistory, pendingStatus } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n};\r\n\r\nconst Recorder = ({\r\n  songResponse,\r\n  addToHistory,\r\n  apiQuery,\r\n  pendingStatus,\r\n  songs\r\n}) => {\r\n  const [isRecording, setRecording] = useState(false);\r\n  const [Recorded, setRecorded] = useState({});\r\n  const [isFinished, setFinished] = useState(false);\r\n  const onStop = recordedBlob => {\r\n    setRecorded(recordedBlob);\r\n    setFinished(true);\r\n  };\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const onFinish = async ({ target }) => {\r\n    let controlElem = target;\r\n    if (target.children.length === 0) {\r\n      controlElem = target.parentElement;\r\n    }\r\n    controlElem.children[0].innerText = \"Waiting\";\r\n    pendingStatus();\r\n    const fd = new FormData();\r\n    fd.append(\"recognize\", Recorded.blob, \"recognize.mp3\");\r\n    const url =\r\n      apiQuery === \"sound\" ? \"/api/recognize\" : \"/api/recognizeByHumming\";\r\n    const data = await fetch(url, {\r\n      method: \"POST\",\r\n      body: fd\r\n    })\r\n      .then(res => res.ok ? res.json() : {message: 'error'})\r\n      .catch(err => console.log('Something went wrong'));\r\n    songResponse(data);\r\n    if (data) {\r\n      addToHistory(data);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <MDBCol xs={'1'} className=\"align-self-center\">\r\n        <ReactMic\r\n          record={isRecording}\r\n          className=\"sound-wave normalize-width rounded-borders\"\r\n          onStop={onStop}\r\n          strokeColor=\"#FFF\"\r\n          backgroundColor=\"#3a3a3a\"\r\n          mimeType=\"audio/mp3\"\r\n          width={windowDimensions.width > 840 ? \"640\" : \"300\"}\r\n        />\r\n      </MDBCol>\r\n      <MDBRow className=\"justify-content-center\">\r\n        <MDBBtn\r\n          className=\"stable-width\"\r\n          color=\"elegant\"\r\n          onClick={e => setRecording(!isRecording)}\r\n        >\r\n          <h4 className=\"mb-0\">{isRecording ? \"Stop\" : \"Record\"}</h4>\r\n        </MDBBtn>\r\n        <MDBBtn\r\n          className=\"stable-width\"\r\n          color=\"elegant\"\r\n          onClick={onFinish}\r\n          disabled={!isRecording && isFinished && !songs.pending ? false : true}\r\n        >\r\n          <h4 className=\"mb-0\">Finish</h4>\r\n        </MDBBtn>\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  songResponse,\r\n  addToHistory,\r\n  pendingStatus\r\n};\r\n\r\nconst mapStateToProps = ({ songs }) => ({\r\n  songs\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Recorder);\r\n","import React, { useState } from \"react\";\r\nimport { MDBCol, MDBRow, MDBBtn } from \"mdbreact\";\r\nimport { songResponse, addToHistory } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { pendingStatus } from \"../redux/actions\";\r\n\r\nconst Texter = ({ songResponse, addToHistory, pendingStatus, songs }) => {\r\n  const [songText, setText] = useState('')\r\n  const onSend = async e => {\r\n    e.preventDefault();\r\n    pendingStatus();\r\n    const button = e.target.lastChild.children[0];\r\n    button.children[0].innerText = \"Waiting\";\r\n    const obj = { data: songText };\r\n    const data = await fetch(`/api/search`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(obj)\r\n    }).then(res => res.ok ? res.json() : {message: 'error'}).catch(err => console.log('Something went wrong'));;\r\n    songResponse(data);\r\n    if (data) {\r\n      addToHistory(data);\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={onSend}>\r\n      <MDBCol md={'5'} className=\"mx-auto\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon\">\r\n              <i className=\"fas fa-pencil-alt prefix\"></i>\r\n            </span>\r\n          </div>\r\n          <textarea\r\n            className=\"form-control text-blacktheme\"\r\n            rows=\"5\"\r\n            value={songText}\r\n            onChange={(e) => setText(e.target.value)}\r\n            required\r\n          ></textarea>\r\n        </div>\r\n      </MDBCol>\r\n      <MDBRow>\r\n        <MDBBtn\r\n          type=\"submit\"\r\n          className=\"stable-width mx-auto mt-3\"\r\n          color=\"elegant\"\r\n          disabled={songs.pending ? true : false}\r\n        >\r\n          <h4 className=\"mb-0\">Send</h4>\r\n        </MDBBtn>\r\n      </MDBRow>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ songs }) => ({\r\n  songs\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  songResponse,\r\n  addToHistory,\r\n  pendingStatus\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Texter);\r\n","import React, { useState } from \"react\";\r\nimport Recorder from \"./Recorder\";\r\nimport Texter from \"./Texter\";\r\nimport { MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\r\n\r\nconst ChooseRecord = () => {\r\n  const [activeButton, setActive] = useState(\"\");\r\n  const Buttons = [\"humming\", \"sound\", \"lyrics\"];\r\n  const handleClick = e => {\r\n    let value;\r\n    if(e.target.tag !== 'button') {\r\n      value = e.target.parentElement.children[0].innerText.toLowerCase()\r\n    }\r\n    setActive(value);\r\n  };\r\n  return (\r\n    <>\r\n      <MDBRow className=\"d-flex justify-content-center mt-10\">\r\n        <h1>Recognize by</h1>\r\n      </MDBRow>\r\n      <MDBRow className=\"d-flex justify-content-center mt-3\">\r\n        {Buttons.map((elem, i) => (\r\n          <MDBCol xs=\"2\" key={i}>\r\n            <MDBBtn\r\n              className=\"stable-width\"\r\n              color=\"elegant\"\r\n              disabled={activeButton === elem ? true : false}\r\n              onClick={handleClick}\r\n            >\r\n              <h4 className=\"mb-0\">{elem}</h4>\r\n            </MDBBtn>\r\n          </MDBCol>\r\n        ))}\r\n      </MDBRow>\r\n      <MDBRow className=\"d-flex flex-column justify-content-center mt-3\">\r\n        {activeButton ? (\r\n          activeButton !== Buttons[2] ? (\r\n            <Recorder apiQuery={activeButton}></Recorder>\r\n          ) : (\r\n            <Texter></Texter>\r\n          )\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChooseRecord;\r\n","import React from \"react\";\r\nimport Guess from \"./Guess\"\r\nimport ChooseRecord from './ChooseRecord'\r\nimport {MDBBtn, MDBRow } from 'mdbreact'\r\n\r\nconst Switcher = ({data, games, round, end, received}) => {\r\n  return (\r\n    <div>\r\n      {received ? (\r\n        <Guess data={data} round={round}></Guess>\r\n      ) : (\r\n        <ChooseRecord></ChooseRecord>\r\n      )}\r\n      {games >= 3 ? (\r\n        <MDBRow className=\"justify-content-center mt-4\">\r\n          <MDBBtn className=\"stable-width\" onClick={end} color=\"elegant\">\r\n            <h4 className=\"mb-0\">Show Results</h4>\r\n          </MDBBtn>\r\n        </MDBRow>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switcher;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardHeader, MDBCardBody, MDBCardTitle } from \"mdbreact\";\r\nimport {startOver} from '../redux/actions'\r\n\r\nconst Results = ({ songHistory, player, server, startOver }) => {\r\n  songHistory = songHistory.flat().filter(elem => elem.title);\r\n  return (\r\n    <div>\r\n      <MDBRow className=\"row d-flex justify-content-center text-center mt-10\">\r\n        <MDBCol>\r\n          <h1>\r\n            {player === server\r\n              ? `Oh, it's a draw!`\r\n              : player > server\r\n              ? \"Congratulations!\"\r\n              : \"Oh sorry, looks like our server is lucky enough\"}{\" \"}\r\n          </h1>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      <MDBRow className=\"row d-flex justify-content-center text-center mt-2\">\r\n        <MDBCol>\r\n          <h2>\r\n            {songHistory.length !== 0 ? 'Here is your song history:' : 'But you got this far without server guesses?'}\r\n          </h2>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      {songHistory\r\n        ? songHistory.map((elem, i) => (\r\n          <MDBRow className=\"d-flex justify-content-center\" key={i}>\r\n            <MDBCol lg={'5'} className=\"mt-3\">\r\n            <MDBCard\r\n              className=\"text-center\"\r\n            >\r\n              <MDBCardHeader className=\"card-header-black\">\r\n                {\" \"}\r\n                <h5>\r\n                  {elem.artist} - {elem.title}\r\n                </h5>\r\n              </MDBCardHeader>\r\n              <MDBCardBody className=\"card-body-black\">\r\n              {elem.preview ? (\r\n                  <audio id=\"player\" className='audio-width'controls>\r\n                    <source src={elem.preview} type=\"audio/mp3\" />\r\n                  </audio>\r\n                ) : (\r\n                  <MDBCardTitle><h4 className=\"mb-0\">Sorry, no preview for this one</h4></MDBCardTitle>\r\n                )}\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n            </MDBCol>\r\n            </MDBRow>\r\n          ))\r\n        : \"\"}\r\n      <MDBRow className=\"justify-content-center mt-4 mb-4\">\r\n        <MDBBtn className=\"stable-width\" onClick={startOver} color=\"elegant\">\r\n          <h4 className=\"mb-0\">To Main Menu</h4>\r\n        </MDBBtn>\r\n      </MDBRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ songHistory }) => ({\r\n  songHistory\r\n});\r\n\r\nconst mapDisaptchToProps = {\r\n    startOver\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDisaptchToProps)(Results);\r\n","import React from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { connect } from \"react-redux\";\r\nimport {end} from \"../redux/actions\"\r\nimport Switcher from \"./Switcher\";\r\nimport Results from \"./Results\";\r\n\r\nconst Game = ({ songs, game, end }) => {\r\n  const { player, server, games, round, results } = game;\r\n  const { data, received } = songs;\r\n  return (\r\n    <MDBContainer className=\"app-color\">\r\n      <MDBRow className=\"d-flex justify-content-center\">\r\n        <MDBCol sm={'5'} className=\"d-flex counter\">\r\n          <table className=\"full-width text-center\">\r\n            <thead>\r\n            <tr>\r\n              <th className=\"h3-responsive th-sm\">You</th>\r\n              <th className=\"h3-responsive th-sm\">Server</th>\r\n            </tr>\r\n            </thead><tbody>\r\n            <tr>\r\n              <td className=\"h3-responsive\">{player}</td>\r\n              <td className=\"h3-responsive\">{server}</td>\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      <MDBRow className=\"d-flex justify-content-center mt-8\">\r\n        <h2>\r\n          Game {games}, Round {round}\r\n        </h2>\r\n      </MDBRow>\r\n      {results ? <Results player={player} server={server} /> : <Switcher data={data} round={round} games={games} received={received} end={end}></Switcher>}\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ songs, game }) => ({\r\n  songs,\r\n  game\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  end\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React from \"react\";\r\nimport \"./stylesheets/app.css\";\r\nimport Intro from \"./Components/Intro\";\r\nimport Game from \"./Components/Game\";\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nconst App = ({game}) => {\r\n  return (\r\n    <div className=\"cover-full\">\r\n      {game.status ? <Game /> : <Intro />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({game}) => ({\r\n  game\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { START, SONG_RESPONSE, GUESSED, GIVE_CHANCE, FINISH, END, GUESS_END, ADD_TO_HISTORY, CLEAR_HISTORY, START_OVER, PENDING_STATUS } from \"./actions\";\r\n\r\nconst game = (state = {status: false, player: 0, server: 0, games: 1, round: 1, results: false}, action) => {\r\n  switch (action.type) {\r\n    case START:\r\n      return {...state, status: true};\r\n    case GUESSED:\r\n      return {...state, server: state.server + 1, games: state.games + 1, round: 1}\r\n    case GIVE_CHANCE: \r\n      return {...state, round: state.round + 1}\r\n    case FINISH:\r\n      return {...state, player: state.player + 1, games: state.games + 1, round: 1}\r\n    case END: \r\n      return {...state, results: true}\r\n    case START_OVER:\r\n      return {status: false, player: 0, server: 0, games: 1, round: 1, results: false}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst songs = (state = { data: '', received: false, pending: false }, action) => {\r\n  switch (action.type) {\r\n    case SONG_RESPONSE:\r\n      return {...action.payload, received: true, pending: false};\r\n    case GUESS_END:\r\n      return {...state, received: false}\r\n    case PENDING_STATUS: \r\n      return {...state, pending: true}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst songHistory = (state = [], action) => {\r\n    switch(action.type) {\r\n      case ADD_TO_HISTORY:\r\n        return [...state, action.payload]\r\n      case CLEAR_HISTORY:\r\n        return []\r\n      default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n  game,\r\n  songs,\r\n  songHistory\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \r\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport reducer from \"./redux/reducers\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nconst store = createStore(\r\n    reducer,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n   );\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}