{"version":3,"sources":["redux/actions.js","Components/Intro.js","Components/Recorder.js","Components/Texter.js","Components/ChooseRecord.js","Components/Guess.js","Components/Switcher.js","Components/Results.js","Components/Game.js","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["songResponse","data","type","payload","end","addToHistory","pendingStatus","mapDispatchToProps","start","status","connect","useState","isStarter","setPage","Buttons","name","func","className","map","elem","i","xs","key","color","onClick","getWindowDimensions","window","width","innerWidth","height","innerHeight","songs","apiQuery","isRecording","setRecording","Recorded","setRecorded","isFinished","setFinished","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","record","onStop","recordedBlob","strokeColor","backgroundColor","mimeType","e","a","async","target","tag","parentElement","children","innerText","fd","FormData","append","blob","url","fetch","method","body","then","json","catch","err","console","log","disabled","pending","onSubmit","preventDefault","lastChild","obj","elements","value","headers","JSON","stringify","md","id","rows","ChooseRecord","activeButton","setActive","handleClick","toLowerCase","guessed","giveChance","finish","guessEnd","round","message","length","lg","artist","title","preview","controls","src","filter","Switcher","games","received","mapDisaptchToProps","startOver","songHistory","player","server","flat","game","results","sm","Boolean","location","hostname","match","combineReducers","state","action","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8e72cfb.chunk.js","sourcesContent":["export const START = 'START';\r\nexport const SONG_RESPONSE = 'SONG_RESPONSE';\r\nexport const GUESSED = 'GUESSED';\r\nexport const GIVE_CHANCE = 'GIVE_CHANCE';\r\nexport const FINISH = 'FINISH';\r\nexport const END = 'END';\r\nexport const GUESS_END = \"GUESS_END\"\r\nexport const ADD_TO_HISTORY = \"ADD_TO_HISTORY\"\r\nexport const CLEAR_HISTORY = \"CLEAR_HISTORY\"\r\nexport const START_OVER = \"START_OVER\"\r\nexport const PENDING_STATUS = \"PENDING_STATUS\"\r\n\r\nexport const start = (status) => ({\r\n    type: START\r\n})\r\n\r\nexport const songResponse = (data) => ({\r\n    type: SONG_RESPONSE,\r\n    payload: {data}\r\n})\r\n\r\nexport const guessed = () => ({\r\n    type: GUESSED\r\n})\r\n\r\nexport const giveChance = () => ({\r\n    type: GIVE_CHANCE\r\n})\r\n\r\nexport const finish = () => ({\r\n    type: FINISH\r\n})\r\n\r\nexport const end = () => ({\r\n    type: END\r\n})\r\n\r\nexport const guessEnd = () => ({\r\n    type: GUESS_END\r\n})\r\n\r\nexport const addToHistory = (data) => ({\r\n    type: ADD_TO_HISTORY,\r\n    payload: data\r\n})\r\n\r\nexport const startOver = () => ({\r\n    type: START_OVER\r\n}) \r\n\r\nexport const pendingStatus = () => ({\r\n    type: PENDING_STATUS\r\n})\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  MDBContainer,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardTitle,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBBtn\r\n} from \"mdbreact\";\r\nimport { start } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Intro = ({ start }) => {\r\n  const [isStarter, setPage] = useState(true);\r\n  const showInstructions = () => {\r\n    setPage(!isStarter);\r\n  };\r\n  const startGame = () => {\r\n    start(true);\r\n  };\r\n  const Buttons = [\r\n    { name: isStarter ? \"Instructions\" : \"Start Page\", func: showInstructions },\r\n    { name: \"Start\", func: startGame }\r\n  ];\r\n  return (\r\n    <MDBContainer className=\"d-flex align-self-center flex-column\">\r\n      <MDBRow className=\"justify-content-center mx-0\">\r\n        <MDBCard\r\n          className={`${isStarter ? \"animate-main\" : \"\"} to-normal-size`}\r\n        >\r\n          <MDBCardTitle>\r\n            <h2 className=\"h2-responsive text-center font-weight-normal pt-4 pr-2 pl-2\">\r\n              {isStarter ? `Welcome to Music-Akinator App!` : `Instructions`}\r\n            </h2>\r\n          </MDBCardTitle>\r\n          <MDBCardBody className=\"pt-1\">\r\n            <h3 className=\"text-center h3-responsive\">\r\n              {isStarter\r\n                ? `This is gaming app, which allows you to challenge our mighty server\r\n            in song recognition. Feel free to read instructions before starting\r\n            the game.`\r\n                : `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`}\r\n            </h3>\r\n          </MDBCardBody>\r\n        </MDBCard>\r\n      </MDBRow>\r\n      <MDBRow className=\"justify-content-center mt-3\">\r\n        {Buttons.map((elem, i) => (\r\n          <MDBCol xs=\"2\" key={i}>\r\n            <MDBBtn\r\n              className=\"stable-width\"\r\n              color=\"elegant\"\r\n              onClick={elem.func}\r\n            >\r\n              <h4 className=\"mb-0\">{elem.name}</h4>\r\n            </MDBBtn>\r\n          </MDBCol>\r\n        ))}\r\n      </MDBRow>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  start\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Intro);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MDBBtn, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { ReactMic } from \"@cleandersonlobo/react-mic\";\r\nimport { songResponse, addToHistory, pendingStatus } from \"../redux/actions\";\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nconst Recorder = ({songResponse, addToHistory, apiQuery, pendingStatus, songs}) => {\r\n  const [isRecording, setRecording] = useState(false);\r\n  const [Recorded, setRecorded] = useState({});\r\n  const [isFinished, setFinished] = useState(false);\r\n  const onStop = recordedBlob => {\r\n    setRecorded(recordedBlob);\r\n    setFinished(true);\r\n  };\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const onFinish = async ({target}) => {\r\n    if (target.tag = 'h4') {\r\n      target = target.parentElement\r\n    }\r\n    target.children[0].innerText = \"Waiting\";\r\n    pendingStatus();\r\n    const fd = new FormData();\r\n    fd.append(\"recognize\", Recorded.blob, \"recognize.mp3\");\r\n    const url = apiQuery === 'sound' ? '/api/recognize' : '/api/recognizeByHumming';\r\n    const data = await fetch(url, {\r\n      method: \"POST\",\r\n      body: fd\r\n    }).then(e => e.json()).catch(err => console.log(err));\r\n    songResponse(data);\r\n    if(data) {\r\n    addToHistory(data);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <MDBCol xs={1} className=\"align-self-center\">\r\n        <ReactMic\r\n          record={isRecording}\r\n          className=\"sound-wave normalize-width rounded-borders\"\r\n          onStop={onStop}\r\n          strokeColor=\"#FFF\"\r\n          backgroundColor=\"#3a3a3a\"\r\n          mimeType=\"audio/mp3\"\r\n          width={windowDimensions.width > 840 ? \"640\" : \"300\"}\r\n        />\r\n      </MDBCol>\r\n      <MDBRow className=\"justify-content-center\">\r\n        <MDBBtn\r\n          className=\"stable-width\"\r\n          color=\"elegant\"\r\n          onClick={e => setRecording(!isRecording)}\r\n        >\r\n          <h4 className=\"mb-0\">{isRecording ? \"Stop\" : \"Record\"}</h4>\r\n        </MDBBtn>\r\n        <MDBBtn\r\n          className=\"stable-width\"\r\n          color=\"elegant\"\r\n          onClick={onFinish}\r\n          disabled={(!isRecording && isFinished) && !songs.pending ? false : true}\r\n        >\r\n          <h4 className=\"mb-0\">Finish</h4>\r\n        </MDBBtn>\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  songResponse,\r\n  addToHistory,\r\n  pendingStatus\r\n};\r\n\r\nconst mapStateToProps = ({songs}) => ({\r\n  songs\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Recorder);\r\n","import React from \"react\";\r\nimport { MDBCol, MDBRow, MDBBtn } from \"mdbreact\";\r\nimport { songResponse, addToHistory } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport {pendingStatus} from '../redux/actions'\r\n\r\nconst Texter = ({ songResponse, addToHistory, pendingStatus, songs }) => {\r\n  const onSend = async e => {\r\n    e.preventDefault();\r\n    pendingStatus();\r\n    const button = e.target.lastChild.children[0];\r\n    button.children[0].innerText = \"Waiting\";\r\n    const obj = { data: e.target.elements[0].value };\r\n    const data = await fetch(`/api/search`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(obj)\r\n    }).then(e => e.json());\r\n    songResponse(data);\r\n    if (data) {\r\n      addToHistory(data);\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={onSend}>\r\n      <MDBCol md={5} className=\"mx-auto\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon\">\r\n              <i className=\"fas fa-pencil-alt prefix\"></i>\r\n            </span>\r\n          </div>\r\n          <textarea\r\n            className=\"form-control text-blacktheme\"\r\n            rows=\"5\"\r\n          ></textarea>\r\n        </div>\r\n      </MDBCol>\r\n      <MDBRow>\r\n        <MDBBtn\r\n          type=\"submit\"\r\n          className=\"stable-width mx-auto mt-3\"\r\n          color=\"elegant\"\r\n          disabled={songs.pending ? true : false}\r\n        >\r\n          <h4 className=\"mb-0\">Send</h4>\r\n        </MDBBtn>\r\n      </MDBRow>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({songs}) => ({\r\n    songs\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  songResponse,\r\n  addToHistory,\r\n  pendingStatus\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Texter);\r\n","import React, { useState } from \"react\";\r\nimport Recorder from \"./Recorder\";\r\nimport Texter from \"./Texter\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\r\n\r\nconst ChooseRecord = () => {\r\n  const [activeButton, setActive] = useState(\"\");\r\n  const Buttons = [\"humming\", \"sound\", \"lyrics\"];\r\n  const handleClick = e => {\r\n    console.log(e.target.innerText);\r\n    setActive(e.target.innerText.toLowerCase());\r\n  };\r\n  return (\r\n    <>\r\n      <MDBRow className=\"d-flex justify-content-center mt-10\">\r\n        <h1>Recognize by</h1>\r\n      </MDBRow>\r\n      <MDBRow className=\"d-flex justify-content-center mt-3\">\r\n        {Buttons.map((elem, i) => (\r\n          <MDBCol xs=\"2\" key={i}>\r\n            <MDBBtn\r\n              className=\"stable-width\"\r\n              color=\"elegant\"\r\n              disabled={activeButton === elem ? true : false}\r\n              onClick={handleClick}\r\n            >\r\n              <h4 className=\"mb-0\">{elem}</h4>\r\n            </MDBBtn>\r\n          </MDBCol>\r\n        ))}\r\n      </MDBRow>\r\n      <MDBRow className=\"d-flex flex-column justify-content-center mt-3\">\r\n        {activeButton ? (\r\n          activeButton !== Buttons[2] ? (\r\n            <Recorder apiQuery={activeButton}></Recorder>\r\n          ) : (\r\n            <Texter></Texter>\r\n          )\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChooseRecord;\r\n","import React from \"react\";\r\nimport { MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardHeader, MDBCardBody, MDBCardTitle } from \"mdbreact\";\r\nimport { guessed, giveChance, finish, end, guessEnd } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nconst Guess = ({ data, guessed, giveChance, finish, end, guessEnd, round }) => {\r\n  // const arr = [\r\n  //   {\r\n  //     preview: `https://cdns-preview-1.dzcdn.net/stream/c-14c52420359ed8eb8f5257a8df72134a-3.mp3`,\r\n  //     artist: \"O.A.R.\",\r\n  //     title: \"Miss You All The Time\"\r\n  //   }\r\n  // ];\r\n  const Buttons = [\r\n    { name: \"Guessed!\", func: guessed },\r\n    { name: \"Give a chance\", func: giveChance },\r\n    { name: \"Finish game\", func: finish }\r\n  ];\r\n  console.log(data);\r\n  return (\r\n    <>\r\n      <MDBRow className=\"row d-flex justify-content-center text-center mt-10\">\r\n        <MDBCol md>\r\n          <h1>\r\n            {data && !data.message && data.length !== 0\r\n              ? \"Are there something familliar?\"\r\n              : \"Sorry, nothing found\"}\r\n          </h1>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      {data && !data.message\r\n        ? data.map(elem => (\r\n          <MDBRow className=\"d-flex justify-content-center\">\r\n            <MDBCol lg={5} className=\"mt-3\">\r\n            <MDBCard\r\n              className=\"text-center\"\r\n            >\r\n              <MDBCardHeader className=\"card-header-black\">\r\n                {\" \"}\r\n                <h5>\r\n                  {elem.artist} - {elem.title}\r\n                </h5>\r\n              </MDBCardHeader>\r\n              <MDBCardBody className=\"card-body-black\">\r\n              {elem.preview ? (\r\n                  <audio id=\"player\" className='audio-width'controls>\r\n                    <source src={elem.preview} type=\"audio/mp3\" />\r\n                  </audio>\r\n                ) : (\r\n                  <MDBCardTitle><h4 className=\"mb-0\">Sorry, no preview for this one</h4></MDBCardTitle>\r\n                )}\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n            </MDBCol>\r\n            </MDBRow>\r\n          ))\r\n        : \"\"}\r\n      <MDBRow className=\"justify-content-center mt-4\">\r\n        {data && !data.message && data.length !== 0\r\n          ? Buttons.map(elem => (\r\n              <MDBBtn\r\n                className=\"stable-width\"\r\n                color=\"elegant\"\r\n                disabled={\r\n                  elem.name === \"Give a chance\" && round >= 5 ? true : false\r\n                }\r\n                onClick={() => {\r\n                  elem.func();\r\n                  guessEnd();\r\n                }}\r\n              >\r\n                <h4 className=\"mb-0\">{elem.name}</h4>\r\n              </MDBBtn>\r\n            ))\r\n          : Buttons.filter((elem, i) => i !== 0).map(elem => (\r\n              <MDBBtn\r\n                className=\"stable-width\"\r\n                color=\"elegant\"\r\n                disabled={\r\n                  elem.name === \"Give a chance\" && round >= 5 ? true : false\r\n                }\r\n                onClick={() => {\r\n                  elem.func();\r\n                  guessEnd();\r\n                }}\r\n              >\r\n                <h4 className=\"mb-0\">{elem.name}</h4>\r\n              </MDBBtn>\r\n            ))}\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  guessed,\r\n  giveChance,\r\n  finish,\r\n  end,\r\n  guessEnd\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Guess);\r\n","import React from \"react\";\r\nimport Guess from \"./Guess\"\r\nimport ChooseRecord from './ChooseRecord'\r\nimport {MDBBtn, MDBRow } from 'mdbreact'\r\n\r\nconst Switcher = ({data, games, round, end, received}) => {\r\n  return (\r\n    <div>\r\n      {received ? (\r\n        <Guess data={data} round={round}></Guess>\r\n      ) : (\r\n        <ChooseRecord></ChooseRecord>\r\n      )}\r\n      {games >= 3 ? (\r\n        <MDBRow className=\"justify-content-center mt-4\">\r\n          <MDBBtn className=\"stable-width\" onClick={end} color=\"elegant\">\r\n            <h4 className=\"mb-0\">Show Results</h4>\r\n          </MDBBtn>\r\n        </MDBRow>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switcher;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardHeader, MDBCardBody, MDBCardTitle } from \"mdbreact\";\r\nimport {startOver} from '../redux/actions'\r\n\r\nconst Results = ({ songHistory, player, server, startOver }) => {\r\n  songHistory = songHistory.flat();\r\n  console.log(player, server, player === server)\r\n  return (\r\n    <div>\r\n      <MDBRow className=\"row d-flex justify-content-center text-center mt-10\">\r\n        <MDBCol md>\r\n          <h1>\r\n            {player === server\r\n              ? `Oh, it's a draw!`\r\n              : player > server\r\n              ? \"Congratulations!\"\r\n              : \"Oh sorry, looks like our server is lucky enough\"}{\" \"}\r\n          </h1>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      <MDBRow className=\"row d-flex justify-content-center text-center mt-2\">\r\n        <MDBCol md>\r\n          <h2>\r\n            {songHistory.length !== 0 ? 'Here is your song history:' : 'But you got this far without server guesses?'}\r\n          </h2>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      {songHistory\r\n        ? songHistory.map(elem => (\r\n          <MDBRow className=\"d-flex justify-content-center\">\r\n            <MDBCol lg={5} className=\"mt-3\">\r\n            <MDBCard\r\n              className=\"text-center\"\r\n            >\r\n              <MDBCardHeader className=\"card-header-black\">\r\n                {\" \"}\r\n                <h5>\r\n                  {elem.artist} - {elem.title}\r\n                </h5>\r\n              </MDBCardHeader>\r\n              <MDBCardBody className=\"card-body-black\">\r\n              {elem.preview ? (\r\n                  <audio id=\"player\" className='audio-width'controls>\r\n                    <source src={elem.preview} type=\"audio/mp3\" />\r\n                  </audio>\r\n                ) : (\r\n                  <MDBCardTitle><h4 className=\"mb-0\">Sorry, no preview for this one</h4></MDBCardTitle>\r\n                )}\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n            </MDBCol>\r\n            </MDBRow>\r\n          ))\r\n        : \"\"}\r\n      <MDBRow className=\"justify-content-center mt-4 mb-4\">\r\n        <MDBBtn className=\"stable-width\" onClick={startOver} color=\"elegant\">\r\n          <h4 className=\"mb-0\">To Main Menu</h4>\r\n        </MDBBtn>\r\n      </MDBRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ songHistory }) => ({\r\n  songHistory\r\n});\r\n\r\nconst mapDisaptchToProps = {\r\n    startOver\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDisaptchToProps)(Results);\r\n","import React, { useState } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\r\nimport ChooseRecord from \"./ChooseRecord\";\r\nimport { connect } from \"react-redux\";\r\nimport Guess from \"./Guess\";\r\nimport {end} from \"../redux/actions\"\r\nimport Switcher from \"./Switcher\";\r\nimport Results from \"./Results\";\r\n\r\nconst Game = ({ songs, game, end }) => {\r\n  console.log(game);\r\n  const { player, server, games, round, results } = game;\r\n  const { data, received } = songs;\r\n  return (\r\n    <MDBContainer className=\"app-color\">\r\n      <MDBRow className=\"d-flex justify-content-center\">\r\n        <MDBCol sm={5} className=\"d-flex counter\">\r\n          <table className=\"full-width text-center\">\r\n            <tr>\r\n              <th className=\"h3-responsive th-sm\">You</th>\r\n              <th className=\"h3-responsive th-sm\">Server</th>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"h3-responsive\">{player}</td>\r\n              <td className=\"h3-responsive\">{server}</td>\r\n            </tr>\r\n          </table>\r\n        </MDBCol>\r\n      </MDBRow>\r\n      <MDBRow className=\"d-flex justify-content-center mt-8\">\r\n        <h2>\r\n          Game {games}, Round {round}\r\n        </h2>\r\n      </MDBRow>\r\n      {results ? <Results player={player} server={server} /> : <Switcher data={data} round={round} games={games} received={received} end={end}></Switcher>}\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ songs, game }) => ({\r\n  songs,\r\n  game\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  end\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React from \"react\";\r\nimport \"./stylesheets/app.css\";\r\nimport Intro from \"./Components/Intro\";\r\nimport Game from \"./Components/Game\";\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nconst App = ({game}) => {\r\n  console.log(game);\r\n  return (\r\n    <div className=\"cover-full\">\r\n      {game.status ? <Game /> : <Intro />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({game}) => ({\r\n  game\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { START, SONG_RESPONSE, GUESSED, GIVE_CHANCE, FINISH, END, GUESS_END, ADD_TO_HISTORY, CLEAR_HISTORY, START_OVER, PENDING_STATUS } from \"./actions\";\r\n\r\nconst game = (state = {status: false, player: 0, server: 0, games: 1, round: 1, results: false}, action) => {\r\n  switch (action.type) {\r\n    case START:\r\n      return {...state, status: true};\r\n    case GUESSED:\r\n      return {...state, server: state.server + 1, games: state.games + 1, round: 1}\r\n    case GIVE_CHANCE: \r\n      return {...state, round: state.round + 1}\r\n    case FINISH:\r\n      return {...state, player: state.player + 1, games: state.games + 1, round: 1}\r\n    case END: \r\n      return {...state, results: true}\r\n    case START_OVER:\r\n      return {status: false, player: 0, server: 0, games: 1, round: 1, results: false}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst songs = (state = { data: '', received: false, pending: false }, action) => {\r\n  switch (action.type) {\r\n    case SONG_RESPONSE:\r\n      return {...action.payload, received: true, pending: false};\r\n    case GUESS_END:\r\n      return {...state, received: false}\r\n    case PENDING_STATUS: \r\n      return {...state, pending: true}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst songHistory = (state = [], action) => {\r\n    switch(action.type) {\r\n      case ADD_TO_HISTORY:\r\n        return [...state, action.payload]\r\n      case CLEAR_HISTORY:\r\n        return []\r\n      default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n  game,\r\n  songs,\r\n  songHistory\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \r\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport reducer from \"./redux/reducers\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nconst store = createStore(\r\n    reducer,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n   );\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}